what is npm?

NPM is a package manager for JavaScript programming language and is the default package manager for Node.js.

Key Features:

1. Package Installation: Installs dependencies required by a project.
2. Package Management: Manages dependencies, versions, and licenses.
3. Repository: Hosts over 1 million packages (libraries and tools).
4. CLI (Command-Line Interface): Provides commands for package management.

NPM Commands:

1. npm init: Initializes a new project.
2. npm install (or npm i): Installs dependencies.
3. npm install [package-name] (or npm i [package-name]): Installs a specific package.
4. npm uninstall [package-name]: Uninstalls a package.
5. npm update: Updates dependencies.
6. npm run [script]: Runs scripts defined in package.json.
7. npm publish: Publishes a package.

package.json File:

A JSON file containing project metadata and dependencies.

Benefits:

1. Simplifies dependency management.
2. Streamlines project setup and configuration.
3. Facilitates collaboration and sharing.
4. Provides access to a vast ecosystem of packages.

Popular NPM Packages:

1. React
2. Angular
3. Vue.js
4. Express.js
5. Lodash
6. jQuery

Alternatives to NPM:

1. Yarn
2. pnpm
3. npm (self-hosted)

Best Practices:

1. Use npm init to initialize projects.
2. Specify dependencies in package.json.
3. Use npm install with --save or --save-dev.
4. Regularly update dependencies.
5. Use npm run for scripts.

NPM is an essential tool for JavaScript developers, making it easy to manage dependencies and streamline project workflows.

---------------------------------------------------------------------------------------------------------------------------
what is package.json

package.json is a JSON file that contains metadata and dependencies for a JavaScript project. It's a crucial file for Node.js and npm (Node Package Manager) projects.

Purpose:

1. Project metadata: name, version, description, author, etc.
2. Dependency management: lists dependencies and their versions.
3. Script definitions: defines commands for building, testing, and running the project.

Common Fields:

1. name: Project name.
2. version: Project version.
3. description: Brief project description.
4. main: Entry point of the project (e.g., index.js).
5. scripts: Defines commands for building, testing, and running.
6. dependencies: Lists production dependencies.
7. devDependencies: Lists development dependencies.
8. author: Project author.
9. license: Project license.

Example package.json:

{
  "name": "my-project",
  "version": "1.0.0",
  "description": "A sample project",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.17.1",
    "react": "^17.0.2"
  },
  "devDependencies": {
    "jest": "^27.0.6",
    "webpack": "^5.51.1"
  },
  "author": "John Doe",
  "license": "MIT"
}


How to Create package.json:

1. Run npm init in your project directory.
2. Follow the prompts to fill in the required information.
3. The file will be generated automatically.

Benefits:

1. Simplifies dependency management.
2. Streamlines project setup and configuration.
3. Facilitates collaboration and sharing.
4. Provides a clear project overview.

Best Practices:

1. Keep package.json up-to-date.
2. Use semantic versioning (e.g., ^4.17.1).
3. Specify dependencies and devDependencies clearly.
4. Use npm install with --save or --save-dev.
5. Regularly update dependencies.

package.json is an essential file for any JavaScript project, providing a centralized location for project metadata and dependencies.


package.json is indeed the configuration file for npm, managing:

1. Project metadata (name, version, description, etc.)
2. Dependencies (packages/libraries) used in the project
3. Version of each dependency

By specifying dependencies and their versions in package.json, npm ensures:

1. Consistent project setup across environments
2. Reliable reproduction of project builds
3. Easy dependency updates and management

Key features of package.json:

1. Dependencies: Lists packages required for production.
2. DevDependencies: Lists packages required for development (e.g., testing frameworks).
3. Versioning: Specifies version ranges for dependencies (e.g., ^4.17.1).
4. Scripts: Defines custom commands for building, testing, and running the project.

package.json uses semantic versioning (SemVer) to manage dependency versions:

1. ^ (caret): Allows updates to minor and patch versions.
2. ~ (tilde): Allows updates to patch versions only.
3. = (exact): Requires exact version match.

Example:

"dependencies": {
  "express": "^4.17.1", // allows updates to 4.x.x
  "react": "~17.0.2", // allows updates to 17.0.x
  "lodash": "=4.17.21" // requires exact version
}


By managing dependencies and versions, package.json simplifies:

1. Collaboration among team members
2. Continuous Integration/Continuous Deployment (CI/CD) pipelines
3. Dependency updates and security patches




------------------------------------------------------------------------------------------------------------------------------------------
Most important package in react is a bundler. What is a bundler?

In React, a bundler is a crucial package that simplifies the development process.

What is a Bundler?

A bundler is a tool that:

1. Combines multiple JavaScript files into a single file (bundle).
2. Resolves dependencies between files.
3. Optimizes code for production.

Key Benefits:

1. Simplifies code organization.
2. Reduces HTTP requests.
3. Improves page load times.
4. Enables tree shaking (removes unused code).

Popular Bundlers for React:

1. Webpack
2. Rollup
3. Parcel

Webpack:

Most widely used bundler for React.

Features:

1. Module resolution.
2. Code splitting.
3. Tree shaking.
4. Hot reloading.

How Webpack Works:

1. Reads index.js (entry point).
2. Resolves dependencies.
3. Bundles code into bundle.js.
4. Outputs optimized code.

Webpack Configuration:

webpack.config.js file:


module.exports = {
  entry: './index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
  },
};


Why Bundlers Matter:

1. Improved performance.
2. Simplified development.
3. Better code organization.

In summary, bundlers like Webpack simplify React development by combining files, resolving dependencies, and optimizing code for production.

------------------------------------------------------------------------------------------------------------------------------------------

What is webpack, parcel, weet?

Webpack

- Most popular JavaScript module bundler.
- Resolves dependencies, bundles code, and optimizes for production.
- Features:
    - Code splitting
    - Tree shaking
    - Hot reloading
    - Module resolution
- Configuration: webpack.config.js
- Pros: Highly customizable, widely adopted.
- Cons: Steeper learning curve.


Parcel

- Fast, zero-configuration bundler.
- Automatically configures Webpack and Babel.
- Features:
    - Blazing-fast builds
    - Automatic code splitting
    - Hot reloading
    - Support for various frameworks (React, Vue, Angular)
- Configuration: Minimal, mostly automatic.
- Pros: Easy to use, fast builds.
- Cons: Limited customization.


------------------------------------------------------------------------------------------------------------------------------------------

npx create-react-app <my-app> uses Webpack under the hood to manage and optimize the application's build process.

create-react-app (CRA) is a popular tool for bootstrapping React applications. It abstracts away the complexity of setting up a development environment, including Webpack configuration.

Here's what happens when you run npx create-react-app <my-app>:

1. CRA installs the required dependencies, including React, Webpack, and Babel.
2. It sets up a basic project structure, including folders for components, assets, and tests.
3. CRA configures Webpack to:
    - Bundle JavaScript files.
    - Compile JSX and TypeScript (if used).
    - Optimize code for production.
    - Enable hot reloading for development.
4. The webpack.config.js file is generated automatically, but it's hidden from the user.

Benefits of using Webpack with CRA:

1. Simplified setup: No need to manually configure Webpack.
2. Optimized builds: Webpack's defaults are optimized for React applications.
3. Easy updates: CRA handles Webpack updates and configurations.

To customize Webpack configuration in a CRA project:

1. Eject the project using npm run eject or yarn eject.
2. Modify the exposed webpack.config.js file.

Keep in mind that ejecting the project gives you full control over Webpack configuration but also removes the simplicity of CRA's automated setup.

npx create-react-app + Webpack = Fast and easy React development!

------------------------------------------------------------------------------------------------------------------------------------------

We can install 2 types of dependencies 
Dev dependencies (we use the command npm install -D <package_name>)
Normal dependencies (we use the command npm install <package_name>)

In npm, there are two types of dependencies:

1. Dependencies (Normal Dependencies)

- Installed using: npm install <package_name> or npm i <package_name>
- Listed in package.json under "dependencies"
- Required for production environment
- Examples: React, Express, MongoDB

2. DevDependencies (Development Dependencies)

- Installed using: npm install -D <package_name> or npm i -D <package_name>
- Listed in package.json under "devDependencies"
- Required only for development and testing
- Examples: Webpack, Babel, Jest, ESLint

Key differences:

|  | Dependencies | DevDependencies |
| --- | --- | --- |
| Purpose | Production | Development & Testing |
| Installation | npm install | npm install -D |
| Listed in | "dependencies" | "devDependencies" |
| Environment | Production | Development |

Examples of DevDependencies:

- Testing frameworks (Jest, Mocha)
- Build tools (Webpack, Rollup)
- Code linters (ESLint, TSLint)
- Code formatters (Prettier)

Examples of Dependencies:

- Front-end frameworks (React, Angular)
- Back-end frameworks (Express, Koa)
- Database drivers (MongoDB, PostgreSQL)

Best practices:

- Keep dependencies up-to-date
- Use semantic versioning (e.g., ^4.17.1)
- Review and remove unnecessary dependencies
- Use npm install for production dependencies
- Use npm install -D for development dependencies

By distinguishing between dependencies and devDependencies, you ensure:

- Efficient production environment
- Simplified development workflow
- Clear separation of concerns
------------------------------------------------------------------------------------------------------
what is ^ symbol in package.json

In package.json, the ^ symbol is used to specify version ranges for dependencies.

Caret (^) Versioning

^ allows updates to minor and patch versions, while keeping the major version fixed.

Example:


"dependencies": {
  "express": "^4.17.1"
}


This means:

- Major version: 4 (fixed)
- Minor version: ≥ 17 (update allowed)
- Patch version: ≥ 1 (update allowed)

Permitted versions:

- 4.17.1
- 4.18.0
- 4.20.3

Not permitted:

- 5.0.0 (major version change)

Tilde (~) Versioning

~ allows updates to patch versions only.

Example:


"dependencies": {
  "express": "~4.17.1"
}


This means:

- Major version: 4 (fixed)
- Minor version: 17 (fixed)
- Patch version: ≥ 1 (update allowed)

Permitted versions:

- 4.17.1
- 4.17.2
- 4.17.3

Not permitted:

- 4.18.0 (minor version change)

Exact Versioning

No symbol (=) specifies an exact version.

Example:


"dependencies": {
  "express": "4.17.1"
}


This means:

- Only version 4.17.1 is allowed

Version Range Syntax

| Symbol | Meaning |
| --- | --- |
| ^ | Allow minor and patch updates |
| ~ | Allow patch updates only |
| (no symbol) | Exact version |
| > | Greater than |
| < | Less than |
| >= | Greater than or equal |
| <= | Less than or equal |
| = | Exact version |

Understanding version ranges helps manage dependencies effectively.

------------------------------------------------------------------------------------------------------

what is the difference between package.json and package-lock.json

package.json and package-lock.json are two essential files in Node.js projects.

package.json

- Purpose: Defines project metadata and dependencies.
- Content:
    - Project name, version, description, etc.
    - Dependencies (normal and devDependencies)
    - Scripts (build, start, test, etc.)
- Functionality:
    - Specifies dependencies for npm to install.
    - Stores project configuration.
- Created: Manually or via npm init.
- Updated: Manually or via npm install/npm update.

package-lock.json

- Purpose: Records exact dependency versions and tree.
- Content:
    - Dependency versions (including transitive dependencies).
    - Dependency tree structure.
    - Hashes for integrity checking.
- Functionality:
    - Ensures reproducible builds.
    - Prevents dependency version drift.
    - Optimizes npm install performance.
- Created: Automatically by npm (v5+) when installing dependencies.
- Updated: Automatically by npm when dependencies change.

Key differences:

|  | package.json | package-lock.json |
| --- | --- | --- |
| Purpose | Project metadata & dependencies | Dependency versions & tree |
| Content | Project config, dependencies | Exact versions, tree structure |
| Functionality | Specifies dependencies | Ensures reproducible builds |
| Creation | Manual or npm init | Automatic (npm v5+) |
| Update | Manual or npm install | Automatic (npm) |

Key benefits of package-lock.json:

1. Reproducible builds.
2. Faster npm install times.
3. Improved dependency security.
4. Reduced version conflicts.

Best practices:

1. Commit package-lock.json to version control.
2. Keep package.json and package-lock.json in sync.
3. Use npm ci for consistent builds.
4. Review package-lock.json for dependency updates.

By understanding the differences between package.json and package-lock.json, you'll manage dependencies more effectively.

---------------------------------------------------------------------------------------------------------------------------------
The integrity field in `package-lock.json` ensures the security and integrity of packages.

### What is integrity in package-lock.json?

The integrity field contains a cryptographic hash (e.g., SHA-512) of the package contents.

### Purpose:
1. Prevents tampering
2. Prevents man-in-the-middle (MITM) attacks
3. Ensures authenticity

### How it works:
1. npm generates a hash when installing a package.
2. The hash is stored in `package-lock.json`.
3. npm verifies package contents against the stored hash during reinstallations.

### Example:

```json
{
  "name": "package-name",
  "version": "1.2.3",
  "integrity": "sha512-abc123def456ghi789jkl012mno345pqr678stu"
}
```

### Hash algorithms:
1. SHA-512 (most common)
2. SHA-256
3. SHA-1 (legacy)

### Benefits:
1. Secure dependency management
2. Prevents malicious modifications
3. Ensures reproducible builds

### Best practices:
1. Commit `package-lock.json` to version control.
2. Keep it up-to-date.
3. Use `npm ci` for consistent builds.

By using the integrity field, `package-lock.json` adds a layer of security to your project's dependencies.

---------------------------------------------------------------------------------------------------------

### What are MITM attacks in React?

**MITM (Man-in-the-Middle) attacks** occur when an attacker intercepts communication between the client and server to steal or manipulate data. In React apps, this could involve intercepting API requests, injecting malicious scripts, or tampering with resources like JavaScript libraries from CDNs.

### How to prevent MITM attacks:

1. **Use HTTPS**: Always serve your React app over HTTPS to secure communication.
2. **Enable SSL pinning**: To ensure communication with the right server.
3. **Use Subresource Integrity (SRI)**: For scripts from CDNs, ensuring integrity.

These measures help protect your React app from tampered content and stolen data during transit.

-----------------------------------------------------------------------------------------------------------

The `node_modules` folder contains all the code for the packages that were fetched from npm when installing dependencies. 

It includes the libraries and their dependencies that are required for your project to run. 

Each package is stored as a subfolder inside `node_modules`, and npm manages this structure to ensure all dependencies are properly installed.

-----------------------------------------------------------------------------------------------------------

node_modules is a directory where npm (Node Package Manager) stores the packages and their dependencies installed for a project.

*What's inside node_modules?*

1. Installed packages: Code for each package, including dependencies.
2. Package dependencies: Transitive dependencies required by installed packages.
3. Module files: JavaScript files, JSON files, and other assets.

*How is node_modules populated?*

1. npm install command: Installs packages and dependencies.
2. npm install <package_name>: Installs a specific package.
3. package.json file: Specifies dependencies for npm to install.

Key characteristics:

1. Auto-generated: Created by npm when installing packages.
2. Dynamic: Changes when packages are installed, updated, or removed.
3. Local to project: Specific to each project, not shared globally.

Best practices:

1. Don't edit files in node_modules manually.
2. Use npm install or npm update to manage packages.
3. Ignore node_modules in version control (e.g., .gitignore).
4. Use npm ci for consistent builds.

*Relationship with package-lock.json*

package-lock.json records the exact versions of packages installed in node_modules, ensuring reproducible builds.

By understanding node_modules, you'll manage dependencies more effectively.
------------------------------------------------------------------------------------

transitive dependencies refer to dependencies that are not directly specified in your project's package.json file but are required by the dependencies you've installed.

Definition:

A transitive dependency is a dependency of a dependency.

Example:

package.json:

{
  "dependencies": {
    "react": "^18.2.0"
  }
}

react depends on object-assign:

{
  "dependencies": {
    "object-assign": "^4.1.1"
  }
}

object-assign depends on es6-promise:

{
  "dependencies": {
    "es6-promise": "^4.2.8"
  }
}


Here:

- react is a direct dependency
- object-assign is a transitive dependency (required by react)
- es6-promise is a transitive dependency (required by object-assign)

Characteristics:

1. Indirect dependencies
2. Required by direct dependencies
3. Not explicitly installed
4. Automatically installed by npm

Types of transitive dependencies:

1. Direct transitive dependencies (immediate dependencies of a direct dependency)
2. Indirect transitive dependencies (dependencies of transitive dependencies)

Tools to manage transitive dependencies:

1. npm ls command
2. npm dedupe command
3. package-lock.json file

Best practices:

1. Use npm ls to visualize dependency tree
2. Use npm dedupe to optimize dependency tree
3. Review package-lock.json file
4. Avoid manual edits to node_modules

Benefits:

1. Simplifies dependency management
2. Reduces dependency conflicts
3. Improves project stability

By understanding transitive dependencies in npm, you'll better manage your project's dependencies.

------------------------------------------------------------------------

To prevent node_modules from being committed to Git, create a .gitignore file and add /node_modules to it.

*Why ignore node_modules?*

1. Large folder size: node_modules can be massive, slowing down Git operations.
2. Duplicate data: node_modules contains dependencies already listed in package.json.
3. Version conflicts: Committing node_modules can lead to version conflicts.

*Create .gitignore file:*

1. Open your project directory in a text editor or IDE.
2. Create a new file named .gitignore.
3. Add the following line: /node_modules
4. Save the file.

.gitignore file example:

/node_modules
/build
/dist
/.DS_Store

Other files to ignore:

1. Build artifacts (/build, /dist)
2. Operating system files (/.DS_Store)
3. IDE configuration files (/.idea, /.vscode)

Git commands to ignore changes:

1. git rm --cached -r node_modules (remove existing tracked files)
2. git update-index --assume-unchanged node_modules (ignore future changes)

Best practices:

1. Create .gitignore early in project development.
2. Review .gitignore regularly.
3. Use git status and git diff to verify ignored files.

By ignoring node_modules and other unnecessary files, you'll maintain a clean and efficient Git repository.


-------------------------------------------------------------------------------------------
package-lock.json should indeed be committed to GitHub to ensure consistent dependency management across the team and environments.

*Why commit package-lock.json?*

1. Ensures reproducible builds: Guarantees identical dependency versions across environments.
2. Maintains code integrity: Prevents unintended dependency updates or changes.
3. Simplifies collaboration: Ensures all team members use the same dependency versions.
4. Optimizes dependency resolution: Faster installation and updates.

*Benefits of committing package-lock.json*

1. Consistent dependencies across environments (dev, staging, prod)
2. Reduced errors due to dependency version conflicts
3. Easier debugging and troubleshooting
4. Improved security (ensures exact dependency versions)

Best practices

1. Commit package-lock.json alongside package.json
2. Keep package-lock.json up-to-date with npm install or npm update
3. Use npm ci for consistent builds
4. Review package-lock.json changes carefully

Related GitHub practices

1. Commit package-lock.json in the same commit as package.json changes
2. Use GitHub's "Verify dependencies" feature (optional)
3. Consider using Dependabot or similar tools for automated dependency updates

By committing package-lock.json, you ensure that your project's dependencies are consistent, reliable, and secure.

--------------------------------------------------------------------------------------

npm and npx serve different purposes:

npm (Node Package Manager)

1. Installs packages from the npm registry.
2. Manages project dependencies.
3. Updates package versions.

Example: npm install react

npx (Node Package Executor)

1. Executes packages without installing them globally.
2. Runs packages from the npm registry or local node_modules.
3. Provides a temporary environment for package execution.

Example: npx create-react-app my-app

Key differences:

|  | npm | npx |
| --- | --- | --- |
| Purpose | Install packages | Execute packages |
| Installation | Global or local | Temporary |
| Package location | node_modules | Cache or node_modules |

npx benefits:

1. No need for global installations.
2. Avoids version conflicts.
3. Simplifies one-time executions.

Common npx use cases:

1. Running build tools (e.g., Webpack, Rollup).
2. Executing test frameworks (e.g., Jest, Mocha).
3. Creating new projects (e.g., Create React App).

Best practices:

1. Use npm for installing dependencies.
2. Use npx for one-time package executions.
3. Review package documentation for usage guidelines.

By understanding the difference between npm and npx, you'll efficiently manage packages and execute tasks in your projects.

---------------------------------------------------------------------------------

Using CDN links to include React in a project is not recommended, and here's why:

CDN Link Approach:

1. Makes a request to the CDN server every time the page loads.
2. Downloads the library (React) from the CDN server.
3. Increases page load time.
4. Depends on the CDN server's availability.
5. No version control or management.

npm Install Approach:

1. Installs React locally in node_modules.
2. Faster page loads since no external request.
3. Better security (no reliance on external servers).
4. Version control and management via package.json.
5. Easy upgrades and updates.

Benefits of using npm install:

1. Faster Development: No need to wait for CDN requests.
2. Offline Development: Work without internet connectivity.
3. Version Control: Manage React versions easily.
4. Security: Reduce dependence on external servers.
5. Customization: Easily customize or fork React.

package.json benefits:

1. Dependency Management: Track dependencies.
2. Version Control: Manage version updates.
3. Script Execution: Run scripts (e.g., build, start).
4. Collaboration: Share dependencies with team members.

Best practices:

1. Use npm or yarn for package management.
2. Install dependencies locally (node_modules).
3. Manage versions via package.json.
4. Use CDN links only for small, static assets.

When to use CDN links:

1. Small projects with minimal dependencies.
2. Prototyping or proof-of-concept.
3. Static websites with no build process.

In general, using npm install is the recommended approach for including React in your project.

-------------------------------------------------------------------------------------------------
ParcelJS Overview: ParcelJS is a powerful, all-in-one bundling tool for web development that optimizes project performance and efficiency.

Bundle Definition: A bundle is a collection of JavaScript, CSS, and assets combined for efficient browser delivery and deployment.

Zero Configuration: ParcelJS offers a zero-config setup, automatically detecting project needs and providing optimized builds.

Hot Module Reloading (HMR): ParcelJS supports HMR, allowing instant code updates in the browser without manual refreshes.

Efficient File Watching: It uses a C++-based file watcher algorithm for fast file recompilation during development.

Bundling and Minification: ParcelJS automatically analyzes dependencies, creating optimized bundles for a wide range of file types.

Code Cleaning: Integrated tools like Babel and PostCSS ensure compatibility and performance optimization across browsers.

Development & Production Builds: ParcelJS offers a development server with HMR and optimized production builds with minification and tree-shaking.

Image Optimization: ParcelJS optimizes images during the build process, reducing file sizes without losing quality for faster load times.

Caching: It caches compiled assets during development, reducing build times for subsequent changes.

HTTPS Support: Secure HTTPS connections are supported in development for testing APIs that require secure communication.

Port Number & Compression: Custom port numbers and gzip compression are supported, improving file delivery and performance.

Consistent Hashing Algorithm: It generates unique filenames for cache busting, ensuring browsers load the latest files after changes.

Comprehensive Documentation: ParcelJS offers extensive, well-organized documentation to help developers leverage its full capabilities.

Installation Commands: ParcelJS can be installed with simple commands (npm install -D parcel), along with React and React DOM.

Starting a Project: Once installed, developers can start the development server and access their project at a local server URL.

Development Simplicity: The tool simplifies both development and production workflows, making it easier to build and deploy projects.

React Compatibility: ParcelJS easily integrates with popular libraries like React, offering a streamlined setup.

Command-Line Instructions: Developers only need a few commands to install ParcelJS, React, and run a project efficiently.

Improved Feedback Loops: Fast recompilation, HMR, and caching contribute to rapid development cycles and feedback.
-------------------------------------------------------------------------------------------------------

Here's a detailed overview of Parcel's features:

Development Build

parcel command (or npm run parcel)

- Creates a development build with optimized settings for rapid iteration

Local Server

parcel serve command (or npm run start)

- Starts a local development server (default: http://localhost:1234)
- Automatically reloads browser on code changes

Hot Module Replacement (HMR)

- Enables instantaneous updates without full page reloads
- Supports HMR for JavaScript, CSS, and HTML

File Matching Algorithm

- Efficiently resolves file dependencies using a caching mechanism
- Improves build performance

Caching

- Stores compiled assets in memory for faster rebuilds
- Reduces build time

Faster Builds

- Utilizes multi-core processing for parallel builds
- Optimizes build performance

Image Optimization

- Automatically optimizes images using:
    - Image compression (gzip, brotli)
    - Image resizing
    - Image formatting (WebP, etc.)

Minification

- Removes unnecessary code and whitespace
- Reduces file size

Bundling

- Combines files into optimized bundles
- Reduces HTTP requests

Compression

- Compresses files using gzip and brotli
- Reduces file size

Consistent Hashing

- Generates consistent hashes for cache busting
- Ensures updated assets are loaded

Code Splitting

- Automatically splits code into smaller chunks
- Improves page load times

Differential Bundling

- Creates separate bundles for modern and legacy browsers
- Supports older browsers

Support Older Browsers

- Automatically transpiles code for older browsers
- Supports IE11, Safari 9, etc.

Diagnostic

- Provides detailed build and error information
- Helps debug issues

Error Handling

- Catches and displays errors during builds
- Provides error messages and stack traces

HTTPS Hosting

- Supports HTTPS hosting for secure development
- Automatically generates SSL certificates

Parcel's extensive feature set makes it an ideal choice for modern web development.

--------------------------------------------------------------------------------------------


